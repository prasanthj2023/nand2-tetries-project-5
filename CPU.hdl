// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=inforareg);
    Not(in=instruction[15], out=notopt);
    Or(a=notopt, b=instruction[5], out=loadfora);
    ARegister(in=inforareg, load=loadfora, out[0..14]=addressM[0..14],out=aregout);

    Mux16(a=aregout, b=inM, sel=instruction[12], out=yofalu);

    And(a=instruction[15], b=instruction[4], out=loadford);
    DRegister(in=aluout, load=loadford, out=xofalu);

    ALU(x=xofalu, y=yofalu, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=aluout, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[3], out=loadformux);
    Mux(a=false, b=true, sel=loadformux, out=writeM);

    And(a=instruction[0], b=instruction[1], out=inst0and1);
    And(a=instruction[2], b=inst0and1, out=UNC);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=zrandng);
    And(a=instruction[0], b=zrandng, out=GLT);

    And(a=instruction[2], b=ng, out=LGT);

    And(a=instruction[1], b=zr, out=GET);

    Or(a=UNC, b=GLT, out=uncorglt);
    Or(a=uncorglt, b=LGT, out=orlgt);
    Or(a=orlgt, b=GET, out=orload);
        
    And(a=instruction[15], b=orload, out=loadforpc);
    Not(in=loadforpc, out=inforinc);
    PC(in=aregout, load=loadforpc, inc=inforinc, reset=reset, out[0..14]=pc[0..14]);
}
